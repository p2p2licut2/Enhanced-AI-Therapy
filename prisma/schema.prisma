generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String              @id @default(cuid())
  name                String?
  firstName           String?
  lastName            String?
  email               String?             @unique
  emailVerified       DateTime?
  password            String?
  image               String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  role                UserRole            @default(USER)
  lastLogin           DateTime?
  failedLoginAttempts Int                 @default(0)
  lockedUntil         DateTime?
  accounts            Account[]
  conversations       Conversation[]
  sessions            Session[]
  twoFactorAuth       TwoFactorAuth?
  userPreferences     UserPreference?
  verificationTokens  VerificationToken[]

  @@map("users")
}

model UserPreference {
  id                   String  @id @default(cuid())
  userId               String  @unique
  theme                String? @default("light")
  preferredTherapistId String?
  notificationsEnabled Boolean @default(true)
  dataRetentionPeriod  Int?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Conversation {
  id          String    @id @default(cuid())
  title       String
  therapistId String
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isFavorite  Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    Message[]

  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  role           String
  content        String
  timestamp      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique
  type      TokenType
  expires   DateTime
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@map("verification_tokens")
}

model TwoFactorAuth {
  id          String    @id @default(cuid())
  userId      String    @unique
  secret      String?
  enabled     Boolean   @default(false)
  verifiedAt  DateTime?
  backupCodes String[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor_auth")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  details   String?
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())

  @@map("audit_logs")
}

enum UserRole {
  USER
  PREMIUM
  THERAPIST
  ADMIN
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  INVITATION
}
